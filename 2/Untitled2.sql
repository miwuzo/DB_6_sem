CREATE PLUGGABLE DATABASE WAREHOUSE_DB
   ADMIN USER DM_A IDENTIFIED BY "12345"
   FILE_NAME_CONVERT = ('/opt/oracle/oradata/ORCLCDB/pdbseed/', '/opt/oracle/oradata/ORCLCDB/WAREHOUSE_DB/');
   

ALTER SESSION SET CONTAINER = WAREHOUSE_DB;  
ALTER PLUGGABLE DATABASE OPEN;



-- Создаем таблицу Warehouses
CREATE TABLE Warehouses (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Name NVARCHAR2(100) NOT NULL,
    Address NVARCHAR2(255),
    Area NUMBER,
    ContactInfo NVARCHAR2(255),
    Type NVARCHAR2(255),
    CONSTRAINT PK_Warehouses PRIMARY KEY (ID)
);

-- Создаем таблицу Positions
CREATE TABLE Positions (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Name NVARCHAR2(100) NOT NULL,
    Description CLOB,
    AccessLevel NUMBER,
    WarehouseID NUMBER NULL,
    IsActive NUMBER(1) DEFAULT 1,
    CONSTRAINT PK_Positions PRIMARY KEY (ID),
    CONSTRAINT FK_Positions_Warehouses FOREIGN KEY (WarehouseID) REFERENCES Warehouses(ID)
);

-- Создаем таблицу Employees
CREATE TABLE Employees (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    FullName NVARCHAR2(255) NOT NULL,
    PositionID NUMBER NOT NULL,
    WarehouseID NUMBER NOT NULL,
    ContactInfo NVARCHAR2(255),
    Status NVARCHAR2(50) DEFAULT 'active',
    CONSTRAINT PK_Employees PRIMARY KEY (ID),
    CONSTRAINT FK_Employees_Positions FOREIGN KEY (PositionID) REFERENCES Positions(ID),
    CONSTRAINT FK_Employees_Warehouses FOREIGN KEY (WarehouseID) REFERENCES Warehouses(ID)
);

-- Создаем таблицу Products
CREATE TABLE Products (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Name NVARCHAR2(255) NOT NULL,
    Article NVARCHAR2(50),
    Description CLOB,
    MeasurementUnit NVARCHAR2(50),
    Price NUMBER,
    CONSTRAINT PK_Products PRIMARY KEY (ID)
);

-- Создаем таблицу Receipts
CREATE TABLE Receipts (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Datee DATE,
    Supplier NVARCHAR2(50),
    InvoiceNumber NVARCHAR2(50),
    WarehouseID NUMBER NOT NULL,
    Total NUMBER,
    CONSTRAINT PK_Receipts PRIMARY KEY (ID),
    CONSTRAINT FK_Receipts_Warehouses FOREIGN KEY (WarehouseID) REFERENCES Warehouses(ID)
);

-- Создаем таблицу Shipments
CREATE TABLE Shipments (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Datee DATE,
    Client NVARCHAR2(50),
    InvoiceNumber NVARCHAR2(50),
    WarehouseID NUMBER NOT NULL,
    Total NUMBER,
    CONSTRAINT PK_Shipments PRIMARY KEY (ID),
    CONSTRAINT FK_Shipments_Warehouses FOREIGN KEY (WarehouseID) REFERENCES Warehouses(ID)
);



DROP TABLE Receipts CASCADE CONSTRAINTS;
DROP TABLE Shipments CASCADE CONSTRAINTS;
DROP TABLE Products CASCADE CONSTRAINTS;
DROP TABLE Employees CASCADE CONSTRAINTS;
DROP TABLE Positions CASCADE CONSTRAINTS;
DROP TABLE Warehouses CASCADE CONSTRAINTS; 


CREATE INDEX IX_Receipts_WarehouseID ON Receipts (WarehouseID);
CREATE INDEX IX_Shipments_WarehouseID ON Shipments (WarehouseID);
CREATE INDEX IX_Employees_PositionID ON Employees (PositionID);
CREATE INDEX IX_Employees_WarehouseID ON Employees (WarehouseID);
CREATE INDEX IX_Positions_WarehouseID ON Positions (WarehouseID);
CREATE INDEX IX_Products_Name ON Products (Name); 








-- Создаем представление ShipmentLog
CREATE OR REPLACE VIEW ShipmentLog AS
SELECT
    s.ID,
    s.Datee,
    s.Client,
    s.InvoiceNumber,
    w.Name,
    s.Total
FROM Shipments s
JOIN Warehouses w ON s.WarehouseID = w.ID;

-- Создаем представление ReceiptLog
CREATE OR REPLACE VIEW ReceiptLog AS
SELECT
    r.ID,
    r.Datee, 
    r.Supplier,
    r.InvoiceNumber,
    w.Name,
    r.Total
FROM Receipts r
JOIN Warehouses w ON r.WarehouseID = w.ID;


SELECT * FROM ShipmentLog;
SELECT * FROM ReceiptLog;










-- ПРОЦЕДУРЫ

-- Создание поступления
CREATE OR REPLACE PROCEDURE CreateReceipt (
    Datee IN DATE,
    Supplier IN VARCHAR2,
    InvoiceNumber IN VARCHAR2,
    WarehouseID IN NUMBER,
    Total IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования склада
    SELECT COUNT(*) INTO v_count FROM Warehouses WHERE ID = WarehouseID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Указанный склад не существует.');
    END IF;

    -- Валидация данных
    IF Datee IS NULL OR Supplier IS NULL OR InvoiceNumber IS NULL OR Total IS NULL THEN
        RAISE_APPLICATION_ERROR(-20002, 'Не все обязательные поля заполнены.');
    END IF;

    IF Total < 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Сумма поступления не может быть отрицательной.');
    END IF;

    BEGIN
        INSERT INTO Receipts (Datee, Supplier, InvoiceNumber, WarehouseID, Total)
        VALUES (Datee, Supplier, InvoiceNumber, WarehouseID, Total);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Редактирование поступления
CREATE OR REPLACE PROCEDURE UpdateReceipt (
    ID IN NUMBER,
    Datee IN DATE,
    Supplier IN VARCHAR2,
    InvoiceNumber IN VARCHAR2,
    WarehouseID IN NUMBER,
    Total IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования поступления
    SELECT COUNT(*) INTO v_count FROM Receipts WHERE ID = ID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'Поступление с указанным ID не найдено.');
    END IF;

    -- Проверка существования склада
    SELECT COUNT(*) INTO v_count FROM Warehouses WHERE ID = WarehouseID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20005, 'Указанный склад не существует.');
    END IF;

    -- Валидация данных
    IF Datee IS NULL OR Supplier IS NULL OR InvoiceNumber IS NULL OR Total IS NULL THEN
        RAISE_APPLICATION_ERROR(-20006, 'Не все обязательные поля заполнены.');
    END IF;

    IF Total < 0 THEN
        RAISE_APPLICATION_ERROR(-20007, 'Сумма поступления не может быть отрицательной.');
    END IF;

    BEGIN
        UPDATE Receipts
        SET Datee = Datee,
            Supplier = Supplier,
            InvoiceNumber = InvoiceNumber,
            WarehouseID = WarehouseID,
            Total = Total
        WHERE ID = ID;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Создание отгрузки
CREATE OR REPLACE PROCEDURE CreateShipment (
    Datee IN DATE,
    Client IN VARCHAR2,
    InvoiceNumber IN VARCHAR2,
    WarehouseID IN NUMBER,
    Total IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования склада
    SELECT COUNT(*) INTO v_count FROM Warehouses WHERE ID = WarehouseID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20008, 'Указанный склад не существует.');
    END IF;

    -- Валидация данных
    IF Datee IS NULL OR Client IS NULL OR InvoiceNumber IS NULL OR Total IS NULL THEN
        RAISE_APPLICATION_ERROR(-20009, 'Не все обязательные поля заполнены.');
    END IF;

    IF Total < 0 THEN
        RAISE_APPLICATION_ERROR(-20010, 'Сумма отгрузки не может быть отрицательной.');
    END IF;

    BEGIN
        INSERT INTO Shipments (Datee, Client, InvoiceNumber, WarehouseID, Total)
        VALUES (Datee, Client, InvoiceNumber, WarehouseID, Total);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Редактирование отгрузки
CREATE OR REPLACE PROCEDURE UpdateShipment (
    ID IN NUMBER,
    Datee IN DATE,
    Client IN VARCHAR2,
    InvoiceNumber IN VARCHAR2,
    WarehouseID IN NUMBER,
    Total IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования отгрузки
    SELECT COUNT(*) INTO v_count FROM Shipments WHERE ID = ID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20011, 'Отгрузка с указанным ID не найдена.');
    END IF;

    -- Проверка существования склада
    SELECT COUNT(*) INTO v_count FROM Warehouses WHERE ID = WarehouseID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20012, 'Указанный склад не существует.');
    END IF;

    -- Валидация данных
    IF Datee IS NULL OR Client IS NULL OR InvoiceNumber IS NULL OR Total IS NULL THEN
        RAISE_APPLICATION_ERROR(-20013, 'Не все обязательные поля заполнены.');
    END IF;

    IF Total < 0 THEN
        RAISE_APPLICATION_ERROR(-20014, 'Сумма отгрузки не может быть отрицательной.');
    END IF;

    BEGIN
        UPDATE Shipments
        SET Datee = Datee,
            Client = Client,
            InvoiceNumber = InvoiceNumber,
            WarehouseID = WarehouseID,
            Total = Total
        WHERE ID = ID;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Добавление товара
CREATE OR REPLACE PROCEDURE CreateProduct (
    Name IN VARCHAR2,
    Article IN VARCHAR2,
    Description IN CLOB,
    MeasurementUnit IN VARCHAR2,
    Price IN NUMBER
) AS
BEGIN
    -- Валидация данных
    IF Name IS NULL OR MeasurementUnit IS NULL OR Price IS NULL THEN
        RAISE_APPLICATION_ERROR(-20015, 'Не все обязательные поля заполнены для товара.');
    END IF;

    IF Price < 0 THEN
        RAISE_APPLICATION_ERROR(-20016, 'Цена товара не может быть отрицательной.');
    END IF;

    BEGIN
        INSERT INTO Products (Name, Article, Description, MeasurementUnit, Price)
        VALUES (Name, Article, Description, MeasurementUnit, Price);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Удаление товара
CREATE OR REPLACE PROCEDURE DeleteProduct (
    ProductID IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования товара
    SELECT COUNT(*) INTO v_count FROM Products WHERE ID = ProductID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20017, 'Товар с указанным ID не найден.');
    END IF;

    BEGIN
        DELETE FROM Products
        WHERE ID = ProductID;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Добавление должности
CREATE OR REPLACE PROCEDURE CreatePosition (
    Name IN VARCHAR2,
    Description IN CLOB,
    AccessLevel IN NUMBER,
    WarehouseID IN NUMBER DEFAULT NULL,
    IsActive IN NUMBER DEFAULT 1
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования склада (если указан)
    IF WarehouseID IS NOT NULL THEN
        SELECT COUNT(*) INTO v_count FROM Warehouses WHERE ID = WarehouseID;
        IF v_count = 0 THEN
            RAISE_APPLICATION_ERROR(-20018, 'Указанный склад не существует.');
        END IF;
    END IF;

    -- Валидация данных
    IF Name IS NULL OR AccessLevel IS NULL THEN
        RAISE_APPLICATION_ERROR(-20019, 'Не все обязательные поля заполнены для должности.');
    END IF;

    IF AccessLevel < 0 THEN
        RAISE_APPLICATION_ERROR(-20020, 'Уровень доступа не может быть отрицательным.');
    END IF;

    BEGIN
        INSERT INTO Positions (Name, Description, AccessLevel, WarehouseID, IsActive)
        VALUES (Name, Description, AccessLevel, WarehouseID, IsActive);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Удаление должности
CREATE OR REPLACE PROCEDURE DeletePosition (
    PositionID IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования должности
    SELECT COUNT(*) INTO v_count FROM Positions WHERE ID = PositionID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20021, 'Должность с указанным ID не найдена.');
    END IF;

    -- Проверка, не используется ли должность сотрудниками
    SELECT COUNT(*) INTO v_count FROM Employees WHERE PositionID = PositionID;
    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20022, 'Невозможно удалить должность, так как она используется сотрудниками.');
    END IF;

    BEGIN
        DELETE FROM Positions
        WHERE ID = PositionID;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Редактирование информации о складе
CREATE OR REPLACE PROCEDURE UpdateWarehouse (
    ID IN NUMBER,
    Name IN VARCHAR2,
    Address IN VARCHAR2,
    Area IN NUMBER,
    ContactInfo IN VARCHAR2,
    Type IN VARCHAR2
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования склада
    SELECT COUNT(*) INTO v_count FROM Warehouses WHERE ID = ID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20023, 'Склад с указанным ID не найден.');
    END IF;

    -- Валидация данных
    IF Name IS NULL THEN
        RAISE_APPLICATION_ERROR(-20024, 'Название склада не может быть пустым.');
    END IF;

    BEGIN
        UPDATE Warehouses
        SET Name = Name,
            Address = Address,
            Area = Area,
            ContactInfo = ContactInfo,
            Type = Type
        WHERE ID = ID;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Добавление сотрудника
CREATE OR REPLACE PROCEDURE CreateEmployee (
    FullName IN VARCHAR2,
    PositionID IN NUMBER,
    WarehouseID IN NUMBER,
    ContactInfo IN VARCHAR2,
    Status IN VARCHAR2 DEFAULT 'active'
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования должности
    SELECT COUNT(*) INTO v_count FROM Positions WHERE ID = PositionID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20025, 'Указанная должность не существует.');
    END IF;

    -- Проверка существования склада
    SELECT COUNT(*) INTO v_count FROM Warehouses WHERE ID = WarehouseID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20026, 'Указанный склад не существует.');
    END IF;

    -- Валидация данных
    IF FullName IS NULL THEN
        RAISE_APPLICATION_ERROR(-20027, 'Полное имя сотрудника не может быть пустым.');
    END IF;

    BEGIN
        INSERT INTO Employees (FullName, PositionID, WarehouseID, ContactInfo, Status)
        VALUES (FullName, PositionID, WarehouseID, ContactInfo, Status);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Редактирование информации о сотруднике
CREATE OR REPLACE PROCEDURE UpdateEmployee (
    ID IN NUMBER,
    FullName IN VARCHAR2,
    PositionID IN NUMBER,
    WarehouseID IN NUMBER,
    ContactInfo IN VARCHAR2,
    Status IN VARCHAR2
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования сотрудника
    SELECT COUNT(*) INTO v_count FROM Employees WHERE ID = ID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20028, 'Сотрудник с указанным ID не найден.');
    END IF;

    -- Проверка существования должности
    SELECT COUNT(*) INTO v_count FROM Positions WHERE ID = PositionID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20029, 'Указанная должность не существует.');
    END IF;

    -- Проверка существования склада
    SELECT COUNT(*) INTO v_count FROM Warehouses WHERE ID = WarehouseID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20030, 'Указанный склад не существует.');
    END IF;

    -- Валидация данных
    IF FullName IS NULL THEN
        RAISE_APPLICATION_ERROR(-20031, 'Полное имя сотрудника не может быть пустым.');
    END IF;

    BEGIN
        UPDATE Employees
        SET FullName = FullName,
            PositionID = PositionID,
            WarehouseID = WarehouseID,
            ContactInfo = ContactInfo,
            Status = Status
        WHERE ID = ID;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/

-- Удаление сотрудника
CREATE OR REPLACE PROCEDURE DeleteEmployee (
    EmployeeID IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Проверка существования сотрудника
    SELECT COUNT(*) INTO v_count FROM Employees WHERE ID = EmployeeID;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20032, 'Сотрудник с указанным ID не найден.');
    END IF;

    BEGIN
        DELETE FROM Employees
        WHERE ID = EmployeeID;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE;
    END;
END;
/




-- ФУНКЦИИ

-- Просмотр информации о товаре 
CREATE OR REPLACE FUNCTION GetProductInfo (
    p_ProductID IN NUMBER
)
RETURN SYS_REFCURSOR
AS
    product_cursor SYS_REFCURSOR;
BEGIN
    OPEN product_cursor FOR
    SELECT *
    FROM Products
    WHERE ID = p_ProductID;

    RETURN product_cursor;
END;
/

-- Просмотр журнала отгрузок
CREATE OR REPLACE FUNCTION GetShipmentLog
RETURN SYS_REFCURSOR
AS
  shipment_cursor SYS_REFCURSOR;
BEGIN
  OPEN shipment_cursor FOR
  SELECT *
  FROM Shipments;
  RETURN shipment_cursor;
END;
/

-- Просмотр журнала поступлений 
CREATE OR REPLACE FUNCTION GetReceiptLog
RETURN SYS_REFCURSOR
AS
    receipt_cursor SYS_REFCURSOR;
BEGIN
    OPEN receipt_cursor FOR
    SELECT *
    FROM Receipts;
    RETURN receipt_cursor;
END;
/

-- ТРИГГЕРЫ

CREATE OR REPLACE TRIGGER TR_Warehouses_Area_Check
BEFORE INSERT OR UPDATE ON Warehouses
FOR EACH ROW
BEGIN
    IF :NEW.Area < 0 THEN
        :NEW.Area := 0;
    END IF;
END;
/


BEGIN
    -- Создание поступления
    CreateReceipt(SYSDATE, 'Supp', 'INV123', 1, 1000);
    
    -- Редактирование поступления
    UpdateReceipt(1, SYSDATE, 'Supp', 'INV123', 1, 1200);
    
    -- Создание отгрузки
    CreateShipment(SYSDATE, 'Cl', 'INV456', 1, 1500);
    
    -- Редактирование отгрузки
    UpdateShipment(1, SYSDATE, 'Cl', 'INV456', 1, 1700);
    
    -- Добавление товара
    CreateProduct('Prod', 'ART001', 'Descr', 'pcs', 100);
    
    -- Удаление товара
    DeleteProduct(1);
    
    -- Добавление должности
    CreatePosition('Man', 'O', 5, NULL, 1);
    
    -- Удаление должности
    DeletePosition(1);
    
    -- Редактирование информации о складе
    UpdateWarehouse(1, 'Warehouse 1', '123 M', 500, '123-456-789', 'Type');
    
    -- Добавление сотрудника
    CreateEmployee('J', 1, 1, 'j@e.com', 'active');
    
    -- Редактирование информации о сотруднике
    UpdateEmployee(1, 'J', 1, 1, 'j@e.com', 'active');
    
    -- Удаление сотрудника
    DeleteEmployee(1);
END;



DECLARE
    product_info VARCHAR2(255);
    shipment_log VARCHAR2(255);
    receipt_log VARCHAR2(255);
BEGIN
    -- Получение информации о товаре
    product_info := GetProductInfo(1);
    DBMS_OUTPUT.PUT_LINE('Product Info: ' || product_info);

    -- Получение журнала отгрузок
    shipment_log := GetShipmentLog();
    DBMS_OUTPUT.PUT_LINE('Shipment Log: ' || shipment_log);

    -- Получение журнала поступлений
    receipt_log := GetReceiptLog();
    DBMS_OUTPUT.PUT_LINE('Receipt Log: ' || receipt_log);
END;